<!-- Build RBS. It is also used by Hudson RBS project. JUnit test is available for this build. -->
<project basedir="." default="package" name="BUILD_RBS">
	<description>
	    Build RBS. 
            Also used by Hudson RBS project. 
	    JUnit test is available for this build.
	    $Id: build_RBS.xml $
	</description>

	<!-- set global properties for this build -->
	<property name="RBSdir" location="../rb-beast" />
	<property name="srcRBS" location="src" />
	<property name="buildRBS" location="build" />
	<property name="libRBS" location="lib" />
	<property name="release_dir" value="release" />
	<property name="distRBS" location="${buildRBS}/dist" />
	<property name="beast2path" location="../beast2" />
	<property name="libBeast2" location="${beast2path}/lib" />
	<property name="srcBeast2" location="${beast2path}/src" />
	<property name="beast2classpath" location="${beast2path}/build" />
	<property name="beastfxclasspath" location="../BeastFX/build" />
	<property name="package_dir" value="${release_dir}/add-on" />

    <import file="${beast2path}/build.xml" />

	<property name="main_class_BEAST" value="beast.app.BeastMCMC" />
	<property name="report" value="${buildRBS}/junitreport"/>

	<path id="classpath">
        <pathelement path="${buildRBS}"/>
		<fileset dir="${libBeast2}" includes="junit-4.8.2.jar"/>
		<fileset dir="${libBeast2}" includes="beagle.jar"/>
                <fileset dir="${libBeast2}" includes="jam.jar"/>
        <pathelement path="${beast2classpath}"/>
        <pathelement path="${beastfxclasspath}"/>
	</path>

	<!-- start -->
	<target name="initRBS">
		<echo message="${ant.project.name}: ${ant.file}" />
         <available file="${RBSdir}/version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
              ** Required file version.xml does not exist. **
            </fail>

          <xmlproperty file="${RBSdir}/version.xml" prefix="fromVersionFile" />
        <property name="RBSversion" value="${fromVersionFile.package(version)}" />
        <property name="projName" value="${fromVersionFile.package(name)}" />
 	</target>

	<target name="cleanRBS">
    	<delete dir="${buildRBS}" />
	</target>

	<!-- clean previous build, and then compile Java source code, and Juint test -->
	<target name="build_all_RBS" depends="cleanRBS,compile-allRBS,junitRBS"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- clean previous build, compile Java source code, and Junit test, and make the beast.jar and beauti.jar -->
	<target name="build_jar_all_RBS" depends="cleanRBS,compile-allRBS,junitRBS,dist_all_RBS"
        description="Clean and Build all run-time stuff">
	</target>


	<!-- No JUnit Test, clean previous build, compile Java source code, and make the RBS.jar and beauti.jar -->
	<target name="build_jar_all_RBS_NoJUnitTest" depends="cleanRBS,compile-allRBS,dist_all_RBS"
        description="Clean and Build all run-time stuff">
	</target>

	<!-- compile Java source code -->
	<target name="compile-allRBS" depends="initRBS,compile-all">


	    <!-- Capture the path as a delimited property using the refid attribute -->
	    <property name="myclasspath" refid="classpath"/>
	    <!-- Emit the property to the ant console -->
	    <echo message="Classpath = ${myclasspath}"/>

		<mkdir dir="${buildRBS}" />

		<!-- Compile the java code from ${srcRBS} into ${buildRBS} /bin -->
		<javac srcdir="${srcRBS}" destdir="${buildRBS}" classpathref="classpath" 
		       fork="true"
		       memoryinitialsize="256m"
		       memorymaximumsize="256m">
			   <!--source="1.6"
		       target="1.6"-->
			<include name="rbbeast/**/**" />
			<!-- compile JUnit test classes -->
			<exclude name="test/beast/**" />
		</javac>
		<echo message="Successfully compiled." />
	</target>

	<!-- make the beast.jar and beauti.jar -->
	<target name="dist_all_RBS" depends="compile-allRBS" description="create RBS jar">
		<!-- Create the distribution directory -->
		<mkdir dir="${distRBS}" />

		<!-- Put everything in ${buildRBS} into the beast.jar file -->
		<jar jarfile="${distRBS}/RBS.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main_class_BEAST}" />
			</manifest>
			<fileset dir="${buildRBS}">
				<include name="rbbeast/**/*.class" />
			</fileset>
			<fileset dir="${beast2classpath}">
				<include name="beast/**/*.class" />
				<include name="beast/**/*.properties" />
				<include name="beast/**/*.png" />
				<include name="beagle/**/*.class" />
				<include name="org/**/*.class" />
			</fileset>
		</jar>
		<jar jarfile="${distRBS}/RBS.src.jar">
			<fileset dir="${srcRBS}">
				<include name="rbbeast/**/*.java" />
				<include name="rbbeast/**/*.png" />
				<include name="rbbeast/**/*.xsl" />
			</fileset>
        </jar>
		<jar jarfile="${distRBS}/RBS.package.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<fileset dir="${buildRBS}">
				<include name="rbbeast/**/*.class" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<!-- run beast.jar -->
	<target name="run_RBS">
		<java jar="${distRBS}/RBS.jar" fork="true" />
	</target>

	
	<!-- JUnit test -->
	<target name="junitRBS">
		<mkdir dir="${report}" />
		<junit printsummary="yes"> <!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildRBS}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${srcRBS}">
                    <include name="test/**/*Test.java"/>                                         
				</fileset>
				<fileset dir="${srcBeast2}">
                    <include name="test/beast/integration/**/*Test.java"/>                                         
                    <exclude name="test/beast/integration/**/ResumeTest.java"/>                                         
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>
    
    <target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml"/>
			<report format="frames" todir="${report}"/>
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>


	<target name="package"
	        depends="build_jar_all_RBS_NoJUnitTest"
	        description="release BEAST 2 package version of RBS">

		<delete dir="${package_dir}" />
		<!-- Create the release directory -->
		<mkdir dir="${package_dir}" />
		<mkdir dir="${package_dir}/lib" />
		<mkdir dir="${package_dir}/examples" />
		<mkdir dir="${package_dir}/fxtemplates" />

		<copy todir="${package_dir}">
			<fileset file="version.xml"/>
		</copy>
		<copy todir="${package_dir}/examples">
			<fileset dir="examples" />
		</copy>
		<copy todir="${package_dir}/lib">
			<fileset dir="${distRBS}" includes="RBS.package.jar" />
		</copy>
		<copy todir="${package_dir}">
			<fileset dir="${distRBS}" includes="RBS.src.jar" />
		</copy>
		<copy todir="${package_dir}/fxtemplates">
			<fileset file="fxtemplates/RBS.xml" />
			<fileset file="fxtemplates/AutoPartition.xml" />
		</copy>

		<jar jarfile="${distRBS}/RBS.package.v${RBSversion}.zip">
			<fileset dir="${package_dir}">
				<include name="**/*" />
			</fileset>
        </jar>
		<echo message="Add-on version v${RBSversion} release is finished." />
	</target>


      <condition property="isWindows"><os family="windows" /></condition>
        <condition property="isLinux"><and><os family="unix"/><not><os family="mac"/></not></and></condition>
        <condition property="isMac"><os family="mac" /></condition>

        <target name="installLinux" depends="package" if="isLinux">
                <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
                        <unzip src="${distRBS}/RBS.package.v${RBSversion}.zip" dest="${user.home}/.beast/2.7/${projName}"/>
        </target>

        <target name="installMac" depends="package" if="isMac">
                <mkdir dir="${user.home}/.beast/2.7/${projName}"/>
                        <unzip src="${distRBS}/RBS.package.v${RBSversion}.zip" dest="${user.home}/Library/Application Support/BEAST/2.7/${projName}"/>
        </target>

        <target name="installWindows" depends="package" if="isWindows">
                <mkdir dir="${user.home}/BEAST/2.7/${projName}"/>
                        <unzip src="${distRBS}/RBS.package.v${RBSversion}.zip" dest="${user.home}/BEAST/2.7/${projName}"/>
        </target>

        <target name="install" depends="installWindows,installMac,installLinux">
        </target>



</project>
